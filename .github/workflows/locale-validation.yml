name: Validate locale files (EN.json vs FR.json)

on:
  push:
    paths:
      - "EN.json"
      - "FR.json"
  pull_request:
    paths:
      - "EN.json"
      - "FR.json"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate EN.json ⇄ FR.json structure and types
        # uses inline NodeJS to avoid separate script files
        run: |
          node <<'NODE'
          const fs = require('fs');

          function load(file) {
            try {
              return JSON.parse(fs.readFileSync(file, 'utf8'));
            } catch (e) {
              console.error(`❌ Invalid JSON in ${file}: ${e.message}`);
              process.exit(1);
            }
          }

          const en = load('EN.json');
          const fr = load('FR.json');

          function typeOf(v) {
            if (Array.isArray(v)) return 'array';
            if (v === null) return 'null';
            return typeof v;
          }

          const missing = [];
          const extra = [];
          const typeMismatches = [];
          const arrayIssues = [];

          // Recursively compare structures.
          function compare(enNode, frNode, path) {
            const enType = typeOf(enNode);
            const frType = typeOf(frNode);

            if (enType !== frType) {
              typeMismatches.push({ path, expected: enType, found: frType });
              // if type differs, stop deeper checks on this branch
              return;
            }

            if (enType === 'object') {
              // both objects: compare keys
              const enKeys = Object.keys(enNode);
              const frKeys = Object.keys(frNode);

              enKeys.forEach(k => {
                if (!(k in frNode)) missing.push(path ? `${path}.${k}` : k);
                else compare(enNode[k], frNode[k], path ? `${path}.${k}` : k);
              });

              frKeys.forEach(k => {
                if (!(k in enNode)) extra.push(path ? `${path}.${k}` : k);
              });
            } else if (enType === 'array') {
              // both arrays: check lengths and compare elements by index
              const enLen = enNode.length;
              const frLen = frNode.length;
              if (enLen !== frLen) {
                arrayIssues.push({
                  path,
                  enLength: enLen,
                  frLength: frLen,
                  note: `expected ${enLen} items, found ${frLen}`
                });
              }
              const min = Math.min(enLen, frLen);
              for (let i = 0; i < min; i++) {
                compare(enNode[i], frNode[i], `${path}[${i}]`);
              }
              // If FR shorter, list missing indices
              if (frLen < enLen) {
                for (let i = frLen; i < enLen; i++) {
                  missing.push(`${path}[${i}]`);
                }
              }
              // If FR longer, list extra indices
              if (frLen > enLen) {
                for (let i = enLen; i < frLen; i++) {
                  extra.push(`${path}[${i}]`);
                }
              }
            } else {
              // primitive (string/number/boolean/null): no deeper structure to compare
              // Optionally: enforce that EN leaf is string (most translations) and FR leaf too
            }
          }

          compare(en, fr, '');

          // Check for "leaf value type" mismatches specifically (helpful for translators)
          // e.g., if EN value is string but FR is array/object etc. Already covered by typeMismatches.

          // Pretty print results
          const anyProblems = missing.length || extra.length || typeMismatches.length || arrayIssues.length;

          if (anyProblems) {
            console.error('❌ Locale validation failed:');

            if (missing.length) {
              console.error(`\n  ❗ ${missing.length} missing path(s) in FR.json:`);
              missing.slice(0, 200).forEach(p => console.error(`    - ${p}`));
            }

            if (extra.length) {
              console.error(`\n  ⚠️ ${extra.length} extra path(s) in FR.json (not in EN.json):`);
              extra.slice(0, 200).forEach(p => console.error(`    - ${p}`));
            }

            if (typeMismatches.length) {
              console.error(`\n  🔄 ${typeMismatches.length} type mismatch(es):`);
              typeMismatches.forEach(t => {
                console.error(`    - ${t.path}: expected ${t.expected}, found ${t.found}`);
              });
            }

            if (arrayIssues.length) {
              console.error(`\n  🧾 ${arrayIssues.length} array length issue(s):`);
              arrayIssues.forEach(a => {
                console.error(`    - ${a.path}: ${a.note}`);
              });
            }

            console.error('\nHint: paths use dot notation for objects and [index] for arrays, e.g. notes[0].Item1');
            process.exit(1);
          } else {
            console.log('✅ FR.json matches EN.json structure and types (arrays & nested values checked).');
          }
          NODE
